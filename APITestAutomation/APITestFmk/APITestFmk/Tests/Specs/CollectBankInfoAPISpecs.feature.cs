// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APITestFmk.Tests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPISpecs")]
    public partial class CollectBankInfoAPISpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CollectBankInfoAPISpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CollectBankInfoAPISpecs", "\tFeature to verify the API for collecting bank account info ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI001_Verify that US bank account details are saved successfully")]
        public virtual void CollectBankInfoAPI001_VerifyThatUSBankAccountDetailsAreSavedSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI001_Verify that US bank account details are saved successfully", ((string[])(null)));
#line 4
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table1.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 5
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table1, "Given ");
#line 8
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI002_Verify that bank account details are not saved when Payment" +
            " method is incorrect")]
        public virtual void CollectBankInfoAPI002_VerifyThatBankAccountDetailsAreNotSavedWhenPaymentMethodIsIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI002_Verify that bank account details are not saved when Payment" +
                    " method is incorrect", ((string[])(null)));
#line 10
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table2.AddRow(new string[] {
                        "SWIFT_Incorrect",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 11
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table2, "Given ");
#line 14
 testRunner.Then("Error Message \"\'payment_method\' field required, the value should be either \'LOCAL" +
                    "\' or \'SWIFT\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI003_Verify that bank account details are not saved when Payment" +
            " method is not provided")]
        public virtual void CollectBankInfoAPI003_VerifyThatBankAccountDetailsAreNotSavedWhenPaymentMethodIsNotProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI003_Verify that bank account details are not saved when Payment" +
                    " method is not provided", ((string[])(null)));
#line 16
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table3.AddRow(new string[] {
                        "",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 17
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table3, "Given ");
#line 20
 testRunner.Then("Error Message \"\'payment_method\' field required, the value should be either \'LOCAL" +
                    "\' or \'SWIFT\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI004_Verify that US bank account details are saved successfully " +
            "when Payment method is Local and no Swift Code is provided")]
        public virtual void CollectBankInfoAPI004_VerifyThatUSBankAccountDetailsAreSavedSuccessfullyWhenPaymentMethodIsLocalAndNoSwiftCodeIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI004_Verify that US bank account details are saved successfully " +
                    "when Payment method is Local and no Swift Code is provided", ((string[])(null)));
#line 22
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table4.AddRow(new string[] {
                        "LOCAL",
                        "US",
                        "Test User1",
                        "123",
                        "",
                        "11122233A",
                        ""});
#line 23
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table4, "Given ");
#line 26
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI005_Verify that US bank account details are saved successfully " +
            "when Payment method is Local and Swift Code is provided")]
        public virtual void CollectBankInfoAPI005_VerifyThatUSBankAccountDetailsAreSavedSuccessfullyWhenPaymentMethodIsLocalAndSwiftCodeIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI005_Verify that US bank account details are saved successfully " +
                    "when Payment method is Local and Swift Code is provided", ((string[])(null)));
#line 28
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table5.AddRow(new string[] {
                        "LOCAL",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 29
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table5, "Given ");
#line 32
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI006_Verify that bank account details are not saved when bank co" +
            "untry code is not provided")]
        public virtual void CollectBankInfoAPI006_VerifyThatBankAccountDetailsAreNotSavedWhenBankCountryCodeIsNotProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI006_Verify that bank account details are not saved when bank co" +
                    "untry code is not provided", ((string[])(null)));
#line 34
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table6.AddRow(new string[] {
                        "SWIFT",
                        "",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 35
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table6, "Given ");
#line 38
 testRunner.Then("Error Message \"\'bank_country_code\' is required, and should be one of \'US\', \'AU\', " +
                    "or \'CN\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI007_Verify that bank account details are not saved when account" +
            " name is not provided")]
        public virtual void CollectBankInfoAPI007_VerifyThatBankAccountDetailsAreNotSavedWhenAccountNameIsNotProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI007_Verify that bank account details are not saved when account" +
                    " name is not provided", ((string[])(null)));
#line 40
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table7.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "",
                        "123",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 41
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table7, "Given ");
#line 44
 testRunner.Then("Error Message \"\'account_name\' is required\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI008_Verify that bank account details are not saved when account" +
            " number is not provided")]
        public virtual void CollectBankInfoAPI008_VerifyThatBankAccountDetailsAreNotSavedWhenAccountNumberIsNotProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI008_Verify that bank account details are not saved when account" +
                    " number is not provided", ((string[])(null)));
#line 46
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table8.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 47
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table8, "Given ");
#line 50
 testRunner.Then("Error Message \"\'account_number\' is required\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI009_Verify that bank account details are not saved when Swift C" +
            "ode is not provided and Payment method is Swift")]
        public virtual void CollectBankInfoAPI009_VerifyThatBankAccountDetailsAreNotSavedWhenSwiftCodeIsNotProvidedAndPaymentMethodIsSwift()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI009_Verify that bank account details are not saved when Swift C" +
                    "ode is not provided and Payment method is Swift", ((string[])(null)));
#line 52
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table9.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123",
                        "",
                        "11122233A",
                        ""});
#line 53
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table9, "Given ");
#line 56
 testRunner.Then("Error Message \"\'swift_code\' is required when payment method is \'SWIFT\'\" is return" +
                    "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI010_Verify that bank account details are not saved when bsb is " +
            "not provided and bank country code is AU")]
        public virtual void CollectBankInfoAPI010_VerifyThatBankAccountDetailsAreNotSavedWhenBsbIsNotProvidedAndBankCountryCodeIsAU()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI010_Verify that bank account details are not saved when bsb is " +
                    "not provided and bank country code is AU", ((string[])(null)));
#line 58
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table10.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "12367856",
                        "ISBCAUBJ",
                        "",
                        ""});
#line 59
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table10, "Given ");
#line 62
 testRunner.Then("Error Message \"\'bsb\' is required when bank country code is \'AU\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI011_Verify that US bank account details are not saved when acco" +
            "unt number is more than 17 characters long")]
        public virtual void CollectBankInfoAPI011_VerifyThatUSBankAccountDetailsAreNotSavedWhenAccountNumberIsMoreThan17CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI011_Verify that US bank account details are not saved when acco" +
                    "unt number is more than 17 characters long", ((string[])(null)));
#line 64
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table11.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123456789012345678",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 65
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table11, "Given ");
#line 68
 testRunner.Then("Error Message \"Length of account_number should be between 7 and 11 when bank_coun" +
                    "try_code is \'US\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI012_Verify that US bank account details are saved successfully " +
            "when account number is 17 characters long")]
        public virtual void CollectBankInfoAPI012_VerifyThatUSBankAccountDetailsAreSavedSuccessfullyWhenAccountNumberIs17CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI012_Verify that US bank account details are saved successfully " +
                    "when account number is 17 characters long", ((string[])(null)));
#line 70
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table12.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "1234567890123ABCD",
                        "ISBCUSBJ",
                        "11122233A",
                        ""});
#line 71
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table12, "Given ");
#line 74
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI013_Verify that AU bank account details are not saved when acco" +
            "unt number is less than 6 characters long")]
        public virtual void CollectBankInfoAPI013_VerifyThatAUBankAccountDetailsAreNotSavedWhenAccountNumberIsLessThan6CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI013_Verify that AU bank account details are not saved when acco" +
                    "unt number is less than 6 characters long", ((string[])(null)));
#line 76
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table13.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "123",
                        "ISBCAUBJ",
                        "",
                        "887221"});
#line 77
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table13, "Given ");
#line 80
 testRunner.Then("Error Message \"Length of account_number should be between 6 and 9 when bank_count" +
                    "ry_code is \'AU\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI014_Verify that AU bank account details are not saved when acco" +
            "unt number is more than 9 characters long")]
        public virtual void CollectBankInfoAPI014_VerifyThatAUBankAccountDetailsAreNotSavedWhenAccountNumberIsMoreThan9CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI014_Verify that AU bank account details are not saved when acco" +
                    "unt number is more than 9 characters long", ((string[])(null)));
#line 82
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table14.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "1234567890",
                        "ISBCAUBJ",
                        "",
                        "887221"});
#line 83
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table14, "Given ");
#line 86
 testRunner.Then("Error Message \"Length of account_number should be between 6 and 9 when bank_count" +
                    "ry_code is \'AU\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI015_Verify that AU bank account details are saved successfully")]
        public virtual void CollectBankInfoAPI015_VerifyThatAUBankAccountDetailsAreSavedSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI015_Verify that AU bank account details are saved successfully", ((string[])(null)));
#line 88
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table15.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "123ABCDE",
                        "ISBCAUBJ",
                        "",
                        "887221"});
#line 89
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table15, "Given ");
#line 92
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI016_Verify that CN bank account details are not saved when acco" +
            "unt number is less than 8 characters long")]
        public virtual void CollectBankInfoAPI016_VerifyThatCNBankAccountDetailsAreNotSavedWhenAccountNumberIsLessThan8CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI016_Verify that CN bank account details are not saved when acco" +
                    "unt number is less than 8 characters long", ((string[])(null)));
#line 94
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table16.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "123",
                        "ISBCAUBJ",
                        "",
                        ""});
#line 95
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table16, "Given ");
#line 98
 testRunner.Then("Error Message \"Length of account_number should be between 8 and 20 when bank_coun" +
                    "try_code is \'CN\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI017_Verify that CN bank account details are not saved when acco" +
            "unt number is more than 20 characters long")]
        public virtual void CollectBankInfoAPI017_VerifyThatCNBankAccountDetailsAreNotSavedWhenAccountNumberIsMoreThan20CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI017_Verify that CN bank account details are not saved when acco" +
                    "unt number is more than 20 characters long", ((string[])(null)));
#line 100
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table17.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "1234567890ABCDEFGHIJK223",
                        "ISBCCNBJ",
                        "",
                        ""});
#line 101
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table17, "Given ");
#line 104
 testRunner.Then("Error Message \"Length of account_number should be between 6 and 9 when bank_count" +
                    "ry_code is \'AU\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI018_Verify that CN bank account details are saved successfully")]
        public virtual void CollectBankInfoAPI018_VerifyThatCNBankAccountDetailsAreSavedSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI018_Verify that CN bank account details are saved successfully", ((string[])(null)));
#line 106
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table18.AddRow(new string[] {
                        "SWIFT",
                        "CN",
                        "Test User1",
                        "123ABCDE",
                        "ISBCCNBJ",
                        "",
                        ""});
#line 107
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table18, "Given ");
#line 110
 testRunner.Then("Success Message \"Bank details saved\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI019_Verify that CN bank account details are not saved when Swif" +
            "t Code is incorrect")]
        public virtual void CollectBankInfoAPI019_VerifyThatCNBankAccountDetailsAreNotSavedWhenSwiftCodeIsIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI019_Verify that CN bank account details are not saved when Swif" +
                    "t Code is incorrect", ((string[])(null)));
#line 112
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table19.AddRow(new string[] {
                        "SWIFT",
                        "CN",
                        "Test User1",
                        "123ABCDE",
                        "ISBCAUBJ",
                        "",
                        ""});
#line 113
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table19, "Given ");
#line 116
 testRunner.Then("Error Message \"The swift code is not valid for the given bank country code: CN\" i" +
                    "s returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI020_Verify that AU bank account details are not saved when Swif" +
            "t Code is incorrect")]
        public virtual void CollectBankInfoAPI020_VerifyThatAUBankAccountDetailsAreNotSavedWhenSwiftCodeIsIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI020_Verify that AU bank account details are not saved when Swif" +
                    "t Code is incorrect", ((string[])(null)));
#line 118
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table20.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "123ABCDE",
                        "ISBCCNBJ",
                        "",
                        "567456"});
#line 119
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table20, "Given ");
#line 122
 testRunner.Then("Error Message \"The swift code is not valid for the given bank country code: AU\" i" +
                    "s returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI021_Verify that US bank account details are not saved when Swif" +
            "t Code is incorrect")]
        public virtual void CollectBankInfoAPI021_VerifyThatUSBankAccountDetailsAreNotSavedWhenSwiftCodeIsIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI021_Verify that US bank account details are not saved when Swif" +
                    "t Code is incorrect", ((string[])(null)));
#line 125
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table21.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123ABCDE",
                        "ISBCCNBJ",
                        "11122233A",
                        ""});
#line 126
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table21, "Given ");
#line 129
 testRunner.Then("Error Message \"The swift code is not valid for the given bank country code: US\" i" +
                    "s returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI022_Verify that US bank account details are not saved when Swif" +
            "t Code is more than 11 characters")]
        public virtual void CollectBankInfoAPI022_VerifyThatUSBankAccountDetailsAreNotSavedWhenSwiftCodeIsMoreThan11Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI022_Verify that US bank account details are not saved when Swif" +
                    "t Code is more than 11 characters", ((string[])(null)));
#line 131
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table22.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123ABCDE",
                        "ISBCUSBJgggggg",
                        "11122233A",
                        ""});
#line 132
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table22, "Given ");
#line 135
 testRunner.Then("Error Message \"Length of \'swift_code\' should be either 8 or 11\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI023_Verify that US bank account details are not saved when Swif" +
            "t Code is less than 8 characters")]
        public virtual void CollectBankInfoAPI023_VerifyThatUSBankAccountDetailsAreNotSavedWhenSwiftCodeIsLessThan8Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI023_Verify that US bank account details are not saved when Swif" +
                    "t Code is less than 8 characters", ((string[])(null)));
#line 137
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table23.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123ABCDEFGHI",
                        "ISBCUS",
                        "11122233A",
                        ""});
#line 138
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table23, "Given ");
#line 141
 testRunner.Then("Error Message \"Length of \'swift_code\' should be either 8 or 11\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI024_Verify that AU bank account details are not saved when bsb " +
            "number is less than 6 characters long")]
        public virtual void CollectBankInfoAPI024_VerifyThatAUBankAccountDetailsAreNotSavedWhenBsbNumberIsLessThan6CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI024_Verify that AU bank account details are not saved when bsb " +
                    "number is less than 6 characters long", ((string[])(null)));
#line 143
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table24.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "1234567",
                        "ISBCAUBJ",
                        "",
                        "887"});
#line 144
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table24, "Given ");
#line 147
 testRunner.Then("Error Message \"Length of \'bsb\' should be 6\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI025_Verify that AU bank account details are not saved when bsb " +
            "number is more than 6 characters long")]
        public virtual void CollectBankInfoAPI025_VerifyThatAUBankAccountDetailsAreNotSavedWhenBsbNumberIsMoreThan6CharactersLong()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI025_Verify that AU bank account details are not saved when bsb " +
                    "number is more than 6 characters long", ((string[])(null)));
#line 149
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table25.AddRow(new string[] {
                        "SWIFT",
                        "AU",
                        "Test User1",
                        "1234567",
                        "ISBCAUBJ",
                        "",
                        "8875678"});
#line 150
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table25, "Given ");
#line 153
 testRunner.Then("Error Message \"Length of \'bsb\' should be 6\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI026_Verify that US bank account details are not saved when aba " +
            "is not provided")]
        public virtual void CollectBankInfoAPI026_VerifyThatUSBankAccountDetailsAreNotSavedWhenAbaIsNotProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI026_Verify that US bank account details are not saved when aba " +
                    "is not provided", ((string[])(null)));
#line 155
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table26.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "",
                        ""});
#line 156
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table26, "Given ");
#line 159
 testRunner.Then("Error Message \"\'aba\' is required when bank country code is \'US\'\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI027_Verify that US bank account details are not saved when aba " +
            "is less than 9 characters")]
        public virtual void CollectBankInfoAPI027_VerifyThatUSBankAccountDetailsAreNotSavedWhenAbaIsLessThan9Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI027_Verify that US bank account details are not saved when aba " +
                    "is less than 9 characters", ((string[])(null)));
#line 161
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table27.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "123",
                        ""});
#line 162
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table27, "Given ");
#line 165
 testRunner.Then("Error Message \"Length of \'aba\' should be 9\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI028_Verify that US bank account details are not saved when aba " +
            "is more than 9 characters")]
        public virtual void CollectBankInfoAPI028_VerifyThatUSBankAccountDetailsAreNotSavedWhenAbaIsMoreThan9Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI028_Verify that US bank account details are not saved when aba " +
                    "is more than 9 characters", ((string[])(null)));
#line 167
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table28.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "Test User1",
                        "123",
                        "ISBCUSBJ",
                        "123456789ABC",
                        ""});
#line 168
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table28, "Given ");
#line 171
 testRunner.Then("Error Message \"Length of \'aba\' should be 9\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI029_Verify that bank account details are not saved when account" +
            " name is of 1 character")]
        public virtual void CollectBankInfoAPI029_VerifyThatBankAccountDetailsAreNotSavedWhenAccountNameIsOf1Character()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI029_Verify that bank account details are not saved when account" +
                    " name is of 1 character", ((string[])(null)));
#line 173
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table29.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "T",
                        "123",
                        "ISBCUSBJ",
                        "33311122A",
                        ""});
#line 174
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table29, "Given ");
#line 177
 testRunner.Then("Error Message \"Length of account_name should be between 2 and 10\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectBankInfoAPI030_Verify that bank account details are not saved when account" +
            " name is of more than 10 characters")]
        public virtual void CollectBankInfoAPI030_VerifyThatBankAccountDetailsAreNotSavedWhenAccountNameIsOfMoreThan10Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectBankInfoAPI030_Verify that bank account details are not saved when account" +
                    " name is of more than 10 characters", ((string[])(null)));
#line 179
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment_Method",
                        "Bank_Country_Code",
                        "Account_Name",
                        "Account_Number",
                        "Swift_Code",
                        "aba",
                        "bsb"});
            table30.AddRow(new string[] {
                        "SWIFT",
                        "US",
                        "T1234567890",
                        "123",
                        "ISBCUSBJ",
                        "33311122A",
                        ""});
#line 180
 testRunner.Given("Collect Bank Account Info API is called with details", ((string)(null)), table30, "Given ");
#line 183
 testRunner.Then("Error Message \"Length of account_name should be between 2 and 10\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
